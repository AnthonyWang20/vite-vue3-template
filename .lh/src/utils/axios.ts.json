{
    "sourceFile": "src/utils/axios.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1649239159327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1649240138531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,47 +1,47 @@\n-import Axios, { AxiosInstance } from 'axios'\r\n-import { ElMessage } from 'element-plus'\r\n-\r\n-const baseURL = 'https://api.github.com'\r\n-\r\n-const axios: AxiosInstance = Axios.create({\r\n-  baseURL,\r\n-  timeout: 20000 // 请求超时 20s\r\n-})\r\n-\r\n-// 前置拦截器（发起请求之前的拦截）\r\n-axios.interceptors.request.use(\r\n-  (config) => {\r\n-    /**\r\n-     * 根据你的项目实际情况来对 config 做处理\r\n-     * 这里对 config 不做任何处理，直接返回\r\n-     */\r\n-    return config\r\n-  },\r\n-  (error) => {\r\n-    return Promise.reject(error)\r\n-  }\r\n-)\r\n-\r\n-// 后置拦截器（获取到响应时的拦截）\r\n-axios.interceptors.response.use(\r\n-  (response) => {\r\n-    /**\r\n-     * 根据你的项目实际情况来对 response 和 error 做处理\r\n-     * 这里对 response 和 error 不做任何处理，直接返回\r\n-     */\r\n-    return response\r\n-  },\r\n-  (error) => {\r\n-    if (error.response && error.response.data) {\r\n-      const code = error.response.status\r\n-      const msg = error.response.data.message\r\n-      ElMessage.error(`Code: ${code}, Message: ${msg}`)\r\n-      console.error(`[Axios Error]`, error.response)\r\n-    } else {\r\n-      ElMessage.error(`${error}`)\r\n-    }\r\n-    return Promise.reject(error)\r\n-  }\r\n-)\r\n-\r\n-export default axios\r\n+import Axios, { AxiosInstance } from 'axios'\n+import { ElMessage } from 'element-plus'\n+\n+const baseURL = 'https://api.github.com'\n+\n+const axios: AxiosInstance = Axios.create({\n+  baseURL,\n+  timeout: 20000 // 请求超时 20s\n+})\n+\n+// 前置拦截器（发起请求之前的拦截）\n+axios.interceptors.request.use(\n+  (config) => {\n+    /**\n+     * 根据你的项目实际情况来对 config 做处理\n+     * 这里对 config 不做任何处理，直接返回\n+     */\n+    return config\n+  },\n+  (error) => {\n+    return Promise.reject(error)\n+  }\n+)\n+\n+// 后置拦截器（获取到响应时的拦截）\n+axios.interceptors.response.use(\n+  (response) => {\n+    /**\n+     * 根据你的项目实际情况来对 response 和 error 做处理\n+     * 这里对 response 和 error 不做任何处理，直接返回\n+     */\n+    return response\n+  },\n+  (error) => {\n+    if (error.response && error.response.data) {\n+      const code = error.response.status\n+      const msg = error.response.data.message\n+      ElMessage.error(`Code: ${code}, Message: ${msg}`)\n+      console.error(`[Axios Error]`, error.response)\n+    } else {\n+      ElMessage.error(`${error}`)\n+    }\n+    return Promise.reject(error)\n+  }\n+)\n+\n+export default axios\n"
                }
            ],
            "date": 1649239159327,
            "name": "Commit-0",
            "content": "import Axios, { AxiosInstance } from 'axios'\r\nimport { ElMessage } from 'element-plus'\r\n\r\nconst baseURL = 'https://api.github.com'\r\n\r\nconst axios: AxiosInstance = Axios.create({\r\n  baseURL,\r\n  timeout: 20000 // 请求超时 20s\r\n})\r\n\r\n// 前置拦截器（发起请求之前的拦截）\r\naxios.interceptors.request.use(\r\n  (config) => {\r\n    /**\r\n     * 根据你的项目实际情况来对 config 做处理\r\n     * 这里对 config 不做任何处理，直接返回\r\n     */\r\n    return config\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// 后置拦截器（获取到响应时的拦截）\r\naxios.interceptors.response.use(\r\n  (response) => {\r\n    /**\r\n     * 根据你的项目实际情况来对 response 和 error 做处理\r\n     * 这里对 response 和 error 不做任何处理，直接返回\r\n     */\r\n    return response\r\n  },\r\n  (error) => {\r\n    if (error.response && error.response.data) {\r\n      const code = error.response.status\r\n      const msg = error.response.data.message\r\n      ElMessage.error(`Code: ${code}, Message: ${msg}`)\r\n      console.error(`[Axios Error]`, error.response)\r\n    } else {\r\n      ElMessage.error(`${error}`)\r\n    }\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nexport default axios\r\n"
        }
    ]
}